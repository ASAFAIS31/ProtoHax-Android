// Generated by delombok at Mon Nov 28 21:50:33 CST 2022
package com.nukkitx.network.raknet;

import io.netty.buffer.ByteBuf;
import io.netty.util.AbstractReferenceCounted;
import io.netty.util.internal.logging.InternalLogger;
import io.netty.util.internal.logging.InternalLoggerFactory;
import java.util.ArrayList;
import java.util.List;
import static com.nukkitx.network.raknet.RakNetConstants.*;

public class RakNetDatagram extends AbstractReferenceCounted {
    private static final InternalLogger log = InternalLoggerFactory.getInstance(RakNetDatagram.class);
    final List<EncapsulatedPacket> packets = new ArrayList<>();
    byte flags = FLAG_VALID;
    final long sendTime;
    long nextSend;
    int sequenceIndex = -1;

    @Override
    public RakNetDatagram retain() {
        super.retain();
        return this;
    }

    @Override
    public RakNetDatagram retain(int increment) {
        super.retain(increment);
        return this;
    }

    @Override
    public RakNetDatagram touch(Object hint) {
        for (EncapsulatedPacket packet : packets) {
            packet.touch(hint);
        }
        return this;
    }

    void decode(ByteBuf buf) {
        flags = buf.readByte();
        sequenceIndex = buf.readUnsignedMediumLE();
        while (buf.isReadable()) {
            EncapsulatedPacket packet = new EncapsulatedPacket();
            packet.decode(buf);
            packets.add(packet);
        }
    }

    public void encode(ByteBuf buf) {
        buf.writeByte(flags);
        buf.writeMediumLE(sequenceIndex);
        for (EncapsulatedPacket packet : packets) {
            packet.encode(buf);
        }
    }

    boolean tryAddPacket(EncapsulatedPacket packet, int mtu) {
        if (this.getSize() + packet.getSize() > mtu - RAKNET_DATAGRAM_HEADER_SIZE) {
            return false;
        }
        packets.add(packet);
        if (packet.split) {
            flags |= FLAG_CONTINUOUS_SEND;
        }
        return true;
    }

    @Override
    public boolean release() {
        return super.release();
    }

    @Override
    protected void deallocate() {
        for (EncapsulatedPacket packet : packets) {
            packet.release();
        }
    }

    public int getSize() {
        int size = RAKNET_DATAGRAM_HEADER_SIZE;
        for (EncapsulatedPacket packet : packets) {
            size += packet.getSize();
        }
        return size;
    }

    @java.lang.SuppressWarnings("all")
    public RakNetDatagram(final long sendTime) {
        this.sendTime = sendTime;
    }

    @java.lang.SuppressWarnings("all")
    public List<EncapsulatedPacket> getPackets() {
        return this.packets;
    }

    @java.lang.SuppressWarnings("all")
    public byte getFlags() {
        return this.flags;
    }

    @java.lang.SuppressWarnings("all")
    public long getSendTime() {
        return this.sendTime;
    }

    @java.lang.SuppressWarnings("all")
    public long getNextSend() {
        return this.nextSend;
    }

    @java.lang.SuppressWarnings("all")
    public int getSequenceIndex() {
        return this.sequenceIndex;
    }

    @java.lang.SuppressWarnings("all")
    public void setFlags(final byte flags) {
        this.flags = flags;
    }

    @java.lang.SuppressWarnings("all")
    public void setNextSend(final long nextSend) {
        this.nextSend = nextSend;
    }

    @java.lang.SuppressWarnings("all")
    public void setSequenceIndex(final int sequenceIndex) {
        this.sequenceIndex = sequenceIndex;
    }

    @java.lang.Override
    @java.lang.SuppressWarnings("all")
    public boolean equals(final java.lang.Object o) {
        if (o == this) return true;
        if (!(o instanceof RakNetDatagram)) return false;
        final RakNetDatagram other = (RakNetDatagram) o;
        if (!other.canEqual((java.lang.Object) this)) return false;
        if (this.getFlags() != other.getFlags()) return false;
        if (this.getSendTime() != other.getSendTime()) return false;
        if (this.getNextSend() != other.getNextSend()) return false;
        if (this.getSequenceIndex() != other.getSequenceIndex()) return false;
        final java.lang.Object this$packets = this.getPackets();
        final java.lang.Object other$packets = other.getPackets();
        if (this$packets == null ? other$packets != null : !this$packets.equals(other$packets)) return false;
        return true;
    }

    @java.lang.SuppressWarnings("all")
    protected boolean canEqual(final java.lang.Object other) {
        return other instanceof RakNetDatagram;
    }

    @java.lang.Override
    @java.lang.SuppressWarnings("all")
    public int hashCode() {
        final int PRIME = 59;
        int result = 1;
        result = result * PRIME + this.getFlags();
        final long $sendTime = this.getSendTime();
        result = result * PRIME + (int) ($sendTime >>> 32 ^ $sendTime);
        final long $nextSend = this.getNextSend();
        result = result * PRIME + (int) ($nextSend >>> 32 ^ $nextSend);
        result = result * PRIME + this.getSequenceIndex();
        final java.lang.Object $packets = this.getPackets();
        result = result * PRIME + ($packets == null ? 43 : $packets.hashCode());
        return result;
    }

    @java.lang.Override
    @java.lang.SuppressWarnings("all")
    public java.lang.String toString() {
        return "RakNetDatagram(packets=" + this.getPackets() + ", flags=" + this.getFlags() + ", sendTime=" + this.getSendTime() + ", nextSend=" + this.getNextSend() + ", sequenceIndex=" + this.getSequenceIndex() + ")";
    }
}
