// Generated by delombok at Mon Nov 28 21:50:33 CST 2022
package com.nukkitx.network.raknet;

import io.netty.buffer.ByteBuf;
import io.netty.util.ReferenceCounted;

public class EncapsulatedPacket implements ReferenceCounted {
    RakNetReliability reliability;
    RakNetPriority priority;
    int reliabilityIndex;
    int sequenceIndex;
    int orderingIndex;
    short orderingChannel;
    boolean split;
    int partCount;
    int partId;
    int partIndex;
    ByteBuf buffer;
    boolean needsBAS;

    public void encode(ByteBuf buf) {
        int flags = reliability.ordinal() << 5;
        if (split) {
            flags |= RakNetConstants.FLAG_PACKET_PAIR;
        }
        if (needsBAS) {
            flags |= RakNetConstants.FLAG_NEEDS_B_AND_AS;
        }
        buf.writeByte(flags); // flags
        buf.writeShort(buffer.readableBytes() << 3); // size
        if (reliability.isReliable()) {
            buf.writeMediumLE(reliabilityIndex);
        }
        if (reliability.isSequenced()) {
            buf.writeMediumLE(sequenceIndex);
        }
        if (reliability.isOrdered() || reliability.isSequenced()) {
            buf.writeMediumLE(orderingIndex);
            buf.writeByte(orderingChannel);
        }
        if (split) {
            buf.writeInt(partCount);
            buf.writeShort(partId);
            buf.writeInt(partIndex);
        }
        buf.writeBytes(this.buffer, this.buffer.readerIndex(), this.buffer.readableBytes());
        // If we need to resend, we don't want the buffer's reader index changing.
    }

    public void decode(ByteBuf buf) {
        byte flags = buf.readByte();
        reliability = RakNetReliability.fromId((flags & 224) >> 5);
        split = (flags & RakNetConstants.FLAG_PACKET_PAIR) != 0;
        needsBAS = (flags & RakNetConstants.FLAG_NEEDS_B_AND_AS) != 0;
        int size = (buf.readUnsignedShort() + 7) >> 3;
        if (reliability.isReliable()) {
            reliabilityIndex = buf.readUnsignedMediumLE();
        }
        if (reliability.isSequenced()) {
            sequenceIndex = buf.readUnsignedMediumLE();
        }
        if (reliability.isOrdered() || reliability.isSequenced()) {
            orderingIndex = buf.readUnsignedMediumLE();
            orderingChannel = buf.readUnsignedByte();
        }
        if (split) {
            partCount = buf.readInt();
            partId = buf.readUnsignedShort();
            partIndex = buf.readInt();
        }
        // Slice the buffer to use less memory
        buffer = buf.readSlice(size);
    }

    public int getSize() {
        // Include back of the envelope calculation
        return 3 + this.reliability.getSize() + (this.split ? 10 : 0) + this.buffer.readableBytes();
    }

    public EncapsulatedPacket fromSplit(ByteBuf reassembled) {
        EncapsulatedPacket packet = new EncapsulatedPacket();
        packet.reliability = this.reliability;
        packet.reliabilityIndex = this.reliabilityIndex;
        packet.sequenceIndex = this.sequenceIndex;
        packet.orderingIndex = this.orderingIndex;
        packet.orderingChannel = this.orderingChannel;
        packet.buffer = reassembled;
        return packet;
    }

    @Override
    public int refCnt() {
        return buffer.refCnt();
    }

    @Override
    public EncapsulatedPacket retain() {
        this.buffer.retain();
        return this;
    }

    @Override
    public EncapsulatedPacket retain(int i) {
        this.buffer.retain(i);
        return this;
    }

    @Override
    public EncapsulatedPacket touch() {
        this.buffer.touch();
        return this;
    }

    @Override
    public EncapsulatedPacket touch(Object o) {
        this.buffer.touch(o);
        return this;
    }

    @Override
    public boolean release() {
        return buffer.release();
    }

    @Override
    public boolean release(int i) {
        return buffer.release(i);
    }

    @java.lang.SuppressWarnings("all")
    public EncapsulatedPacket() {
    }

    @java.lang.SuppressWarnings("all")
    public RakNetReliability getReliability() {
        return this.reliability;
    }

    @java.lang.SuppressWarnings("all")
    public RakNetPriority getPriority() {
        return this.priority;
    }

    @java.lang.SuppressWarnings("all")
    public int getReliabilityIndex() {
        return this.reliabilityIndex;
    }

    @java.lang.SuppressWarnings("all")
    public int getSequenceIndex() {
        return this.sequenceIndex;
    }

    @java.lang.SuppressWarnings("all")
    public int getOrderingIndex() {
        return this.orderingIndex;
    }

    @java.lang.SuppressWarnings("all")
    public short getOrderingChannel() {
        return this.orderingChannel;
    }

    @java.lang.SuppressWarnings("all")
    public boolean isSplit() {
        return this.split;
    }

    @java.lang.SuppressWarnings("all")
    public int getPartCount() {
        return this.partCount;
    }

    @java.lang.SuppressWarnings("all")
    public int getPartId() {
        return this.partId;
    }

    @java.lang.SuppressWarnings("all")
    public int getPartIndex() {
        return this.partIndex;
    }

    @java.lang.SuppressWarnings("all")
    public ByteBuf getBuffer() {
        return this.buffer;
    }

    @java.lang.SuppressWarnings("all")
    public boolean isNeedsBAS() {
        return this.needsBAS;
    }

    @java.lang.Override
    @java.lang.SuppressWarnings("all")
    public boolean equals(final java.lang.Object o) {
        if (o == this) return true;
        if (!(o instanceof EncapsulatedPacket)) return false;
        final EncapsulatedPacket other = (EncapsulatedPacket) o;
        if (!other.canEqual((java.lang.Object) this)) return false;
        if (this.getReliabilityIndex() != other.getReliabilityIndex()) return false;
        if (this.getSequenceIndex() != other.getSequenceIndex()) return false;
        if (this.getOrderingIndex() != other.getOrderingIndex()) return false;
        if (this.getOrderingChannel() != other.getOrderingChannel()) return false;
        if (this.isSplit() != other.isSplit()) return false;
        if (this.getPartCount() != other.getPartCount()) return false;
        if (this.getPartId() != other.getPartId()) return false;
        if (this.getPartIndex() != other.getPartIndex()) return false;
        if (this.isNeedsBAS() != other.isNeedsBAS()) return false;
        final java.lang.Object this$reliability = this.getReliability();
        final java.lang.Object other$reliability = other.getReliability();
        if (this$reliability == null ? other$reliability != null : !this$reliability.equals(other$reliability)) return false;
        final java.lang.Object this$priority = this.getPriority();
        final java.lang.Object other$priority = other.getPriority();
        if (this$priority == null ? other$priority != null : !this$priority.equals(other$priority)) return false;
        final java.lang.Object this$buffer = this.getBuffer();
        final java.lang.Object other$buffer = other.getBuffer();
        if (this$buffer == null ? other$buffer != null : !this$buffer.equals(other$buffer)) return false;
        return true;
    }

    @java.lang.SuppressWarnings("all")
    protected boolean canEqual(final java.lang.Object other) {
        return other instanceof EncapsulatedPacket;
    }

    @java.lang.Override
    @java.lang.SuppressWarnings("all")
    public int hashCode() {
        final int PRIME = 59;
        int result = 1;
        result = result * PRIME + this.getReliabilityIndex();
        result = result * PRIME + this.getSequenceIndex();
        result = result * PRIME + this.getOrderingIndex();
        result = result * PRIME + this.getOrderingChannel();
        result = result * PRIME + (this.isSplit() ? 79 : 97);
        result = result * PRIME + this.getPartCount();
        result = result * PRIME + this.getPartId();
        result = result * PRIME + this.getPartIndex();
        result = result * PRIME + (this.isNeedsBAS() ? 79 : 97);
        final java.lang.Object $reliability = this.getReliability();
        result = result * PRIME + ($reliability == null ? 43 : $reliability.hashCode());
        final java.lang.Object $priority = this.getPriority();
        result = result * PRIME + ($priority == null ? 43 : $priority.hashCode());
        final java.lang.Object $buffer = this.getBuffer();
        result = result * PRIME + ($buffer == null ? 43 : $buffer.hashCode());
        return result;
    }

    @java.lang.Override
    @java.lang.SuppressWarnings("all")
    public java.lang.String toString() {
        return "EncapsulatedPacket(reliability=" + this.getReliability() + ", priority=" + this.getPriority() + ", reliabilityIndex=" + this.getReliabilityIndex() + ", sequenceIndex=" + this.getSequenceIndex() + ", orderingIndex=" + this.getOrderingIndex() + ", orderingChannel=" + this.getOrderingChannel() + ", split=" + this.isSplit() + ", partCount=" + this.getPartCount() + ", partId=" + this.getPartId() + ", partIndex=" + this.getPartIndex() + ", buffer=" + this.getBuffer() + ", needsBAS=" + this.isNeedsBAS() + ")";
    }
}
