// Generated by delombok at Mon Nov 28 21:50:33 CST 2022
package com.nukkitx.network.util;

import javax.annotation.Nonnull;
import java.util.Locale;
import java.util.concurrent.Executors;
import java.util.concurrent.ThreadFactory;
import java.util.concurrent.atomic.AtomicInteger;

public class NetworkThreadFactory implements ThreadFactory {
    private static final ThreadFactory backingFactory = Executors.defaultThreadFactory();
    private final AtomicInteger count = new AtomicInteger(0);
    private final boolean daemon;
    private final String format;
    private final int priority;
    private final Thread.UncaughtExceptionHandler exceptionHandler;

    private static String format(String format, int count) {
        return String.format(Locale.ROOT, format, count);
    }

    @Override
    public Thread newThread(@Nonnull Runnable runnable) {
        Thread thread = backingFactory.newThread(runnable);
        if (format != null) {
            thread.setName(format(format, count.getAndIncrement()));
        }
        thread.setDaemon(daemon);
        thread.setPriority(priority);
        if (exceptionHandler != null) {
            thread.setUncaughtExceptionHandler(exceptionHandler);
        }
        return thread;
    }

    @java.lang.SuppressWarnings("all")
    private static int $default$priority() {
        return Thread.currentThread().getPriority();
    }

    @java.lang.SuppressWarnings("all")
    NetworkThreadFactory(final boolean daemon, final String format, final int priority, final Thread.UncaughtExceptionHandler exceptionHandler) {
        this.daemon = daemon;
        this.format = format;
        this.priority = priority;
        this.exceptionHandler = exceptionHandler;
    }


    @java.lang.SuppressWarnings("all")
    public static class NetworkThreadFactoryBuilder {
        @java.lang.SuppressWarnings("all")
        private boolean daemon;
        @java.lang.SuppressWarnings("all")
        private String format;
        @java.lang.SuppressWarnings("all")
        private boolean priority$set;
        @java.lang.SuppressWarnings("all")
        private int priority$value;
        @java.lang.SuppressWarnings("all")
        private Thread.UncaughtExceptionHandler exceptionHandler;

        @java.lang.SuppressWarnings("all")
        NetworkThreadFactoryBuilder() {
        }

        /**
         * @return {@code this}.
         */
        @java.lang.SuppressWarnings("all")
        public NetworkThreadFactory.NetworkThreadFactoryBuilder daemon(final boolean daemon) {
            this.daemon = daemon;
            return this;
        }

        /**
         * @return {@code this}.
         */
        @java.lang.SuppressWarnings("all")
        public NetworkThreadFactory.NetworkThreadFactoryBuilder format(final String format) {
            this.format = format;
            return this;
        }

        /**
         * @return {@code this}.
         */
        @java.lang.SuppressWarnings("all")
        public NetworkThreadFactory.NetworkThreadFactoryBuilder priority(final int priority) {
            this.priority$value = priority;
            priority$set = true;
            return this;
        }

        /**
         * @return {@code this}.
         */
        @java.lang.SuppressWarnings("all")
        public NetworkThreadFactory.NetworkThreadFactoryBuilder exceptionHandler(final Thread.UncaughtExceptionHandler exceptionHandler) {
            this.exceptionHandler = exceptionHandler;
            return this;
        }

        @java.lang.SuppressWarnings("all")
        public NetworkThreadFactory build() {
            int priority$value = this.priority$value;
            if (!this.priority$set) priority$value = NetworkThreadFactory.$default$priority();
            return new NetworkThreadFactory(this.daemon, this.format, priority$value, this.exceptionHandler);
        }

        @java.lang.Override
        @java.lang.SuppressWarnings("all")
        public java.lang.String toString() {
            return "NetworkThreadFactory.NetworkThreadFactoryBuilder(daemon=" + this.daemon + ", format=" + this.format + ", priority$value=" + this.priority$value + ", exceptionHandler=" + this.exceptionHandler + ")";
        }
    }

    @java.lang.SuppressWarnings("all")
    public static NetworkThreadFactory.NetworkThreadFactoryBuilder builder() {
        return new NetworkThreadFactory.NetworkThreadFactoryBuilder();
    }
}
